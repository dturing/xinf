
package xinf.support;

/**
	Wraps GdkPixbuf structure.
	
	<nekobind 
		translator="CamelCaseToMinuscleUnderscore"
		prefix="gdk_pixbuf_"
		nekoAbstract="__pixbuf"
		cStruct="GdkPixbuf"
		dtor="unref"
		module="xinfinity-support"
		/>
	<nekobind:cHeader>
		#include &lt;gdk-pixbuf/gdk-pixbuf.h&gt;
		#include "neko-pixbuf.h"
	</nekobind:cHeader>
**/
extern class Pixbuf {
	public var width(getWidth,null):Int;
	public var height(getHeight,null):Int;
	
	public function getWidth():Int;
	public function getHeight():Int;
	public function getRowstride():Int;
	public function getHasAlpha():Int;
	public function copyPixels():Dynamic;
	
	public function new() :Void;

	/** <nekobind ctor="true"/>	**/
	public static function newFromCompressedData( data:Dynamic ) :Pixbuf;
	/** <nekobind ctor="true"/>	**/
	public static function newFromRGB( data:Dynamic, width:Int, height:Int, hasAlpha:Int ) :Pixbuf;
	
    
    public static function __init__() : Void {
        DLLLoader.addLibToPath("xinf");
        var ext="so";
        if( neko.Sys.systemName()=="Windows" ) ext="dll";
        if( neko.Sys.systemName()=="Mac" || neko.Sys.systemName()=="Windows" ) {
            var path = DLLLoader.getXinfLibPath()+"/loaders/";
            var fileName = path+"gdk-pixbuf.loaders";
            
            if( !neko.FileSystem.exists( fileName ) ) {
                try {
                    var out = neko.io.File.write(fileName,false);
                    
                    var data = '# GdkPixbuf Image Loader Modules file
# Generated by xinf.

"%PATH%libpixbufloader-jpeg.%EXT%"
"jpeg" 5 "gtk20" "The JPEG image format"
"image/jpeg" ""
"jpeg" "jpe" "jpg" ""
"\\377\\330" "" 100

"%PATH%libpixbufloader-png.%EXT%"
"png" 5 "gtk20" "The PNG image format"
"image/png" ""
"png" ""
"\\211PNG\\r\\n\\032\\n" "" 100

"%PATH%libpixbufloader-gif.%EXT%"
"gif" 4 "gtk20" "The GIF image format"
"image/gif" ""
"gif" ""
"GIF8" "" 100

';
        
                    var p2 = StringTools.replace( path, "\\", "/" );
                    var p2 = StringTools.replace( p2, "//", "/" );
                    var data2 = StringTools.replace( data, "%PATH%", p2 );
                    var data2 = StringTools.replace( data2, "%EXT%", ext );
                    // trace("LOADERS: "+ fileName+":\n"+data2);
                    out.write(data2);
                    out.close();
                } catch(e:Dynamic) {
                    throw("Could not create gdk-pixbuf loaders file. Image loading will not work.");
                }
            }
            
            neko.Sys.putEnv("GDK_PIXBUF_MODULE_FILE",fileName );
        }
        untyped {
            var loader = untyped __dollar__loader;
            Pixbuf = loader.loadmodule("xinfinity-support".__s,loader).Pixbuf__impl;
        }
    }
}
