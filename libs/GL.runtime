#include <GL/gl.h>
#include <GL/glext.h> /* win32 needs this for GL 1.2/1.3 */

/* ------------------------------------------------------------- */
/* simplifications for functions with >5 arguments
/* ------------------------------------------------------------- */

void glMap1d_01( GLenum target, GLint stride, GLint order, const GLdouble *points ) {
    glMap1d( target, .0, 1., stride, order, points );
}

int glCreateTexture( unsigned int tex, int width, int height ) {
printf("GL createTexture %i\n", tex );
    glTexImage2D( GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_BGRA, GL_UNSIGNED_BYTE, NULL );
    return tex;
}

void glTexSubImage2D_BGRA_BYTE( unsigned int tex, value pos, value size, value data ) {
    field f_x = val_id("x");
    field f_y = val_id("y");
    
    int x = val_number( val_field( pos, f_x ) );
    int y = val_number( val_field( pos, f_y ) );
    int w = val_number( val_field( size, f_x ) );
    int h = val_number( val_field( size, f_y ) );
    unsigned char *d = (unsigned char *)val_data(data);

    glTexSubImage2D( GL_TEXTURE_2D, 0, x, y, w, h,
        GL_BGRA, GL_UNSIGNED_BYTE, (unsigned char *)d );
}

void glTexSubImage2D_BGR_BYTE( unsigned int tex, value pos, value size, value data ) {
    field f_x = val_id("x");
    field f_y = val_id("y");
    
    int x = val_number( val_field( pos, f_x ) );
    int y = val_number( val_field( pos, f_y ) );
    int w = val_number( val_field( size, f_x ) );
    int h = val_number( val_field( size, f_y ) );
    unsigned char *d = (unsigned char *)val_data(data);
   
    glTexSubImage2D( GL_TEXTURE_2D, 0, x, y, w, h,
        GL_BGR, GL_UNSIGNED_BYTE, (unsigned char *)d );
}

void glTexSubImage2D_RGBA_BYTE( unsigned int tex, value pos, value size, value data ) {
    field f_x = val_id("x");
    field f_y = val_id("y");
    
    int x = val_number( val_field( pos, f_x ) );
    int y = val_number( val_field( pos, f_y ) );
    int w = val_number( val_field( size, f_x ) );
    int h = val_number( val_field( size, f_y ) );
    unsigned char *d = (unsigned char *)val_data(data);

    glTexSubImage2D( GL_TEXTURE_2D, 0, x, y, w, h,
        GL_RGBA, GL_UNSIGNED_BYTE, (unsigned char *)d );
}

void glTexSubImage2D_RGB_BYTE( unsigned int tex, value pos, value size, value data ) {
    field f_x = val_id("x");
    field f_y = val_id("y");
    
    int x = val_number( val_field( pos, f_x ) );
    int y = val_number( val_field( pos, f_y ) );
    int w = val_number( val_field( size, f_x ) );
    int h = val_number( val_field( size, f_y ) );
    unsigned char *d = (unsigned char *)val_data(data);
   
    glTexSubImage2D( GL_TEXTURE_2D, 0, x, y, w, h,
        GL_RGB, GL_UNSIGNED_BYTE, (unsigned char *)d );
}

void glTexSubImage2D_BGRA_BYTE_PART( unsigned int tex, value pos, value size, value data, value img_width ) {
    field f_x = val_id("x");
    field f_y = val_id("y");
    int _y;
    
    int x = val_number( val_field( pos, f_x ) );
    int y = val_number( val_field( pos, f_y ) );
    int w = val_number( val_field( size, f_x ) );
    int h = val_number( val_field( size, f_y ) );
    int width = val_number( img_width );
    unsigned char *d = (unsigned char *)val_data(data);

    for( _y=y; _y<(y+h); _y++ ) {
      glTexSubImage2D( GL_TEXTURE_2D, 0, x, _y, w, 1,
            GL_BGRA, GL_UNSIGNED_BYTE, ((unsigned char *)d)+((x+(_y*width))*4) );
    }
}
