/* this file is generated with nekobind. do not modify it direcly. */

#include <neko.h>

#define VAL_Int(v) val_number(v)
#define VAL_Float(v) val_number(v)
#define VAL_String(v) val_string(v)    // HaXe strings direct?
#define VAL_Dynamic(v) 0

#define ALLOC_Int(v) (value)alloc_int(v)
#define ALLOC_Float(v) (value)alloc_float(v)
#define ALLOC_String(v) (value)alloc_string(v)
#define ALLOC_Dynamic(v) val_null
#define ALLOC_Void(v) val_null

void check_failed( const char *function, const char *file, int line, value given ) {
    buffer b = alloc_buffer("Invalid type for a parameter of ");
    buffer_append(b,function);
    buffer_append(b," - you gave ");
    val_buffer(b,given);
   
    _neko_failure(buffer_to_string(b), file, line );
}

#define CHECK(v,type) if( !val_is_ ## type (v) ) { check_failed(__FUNCTION__,__FILE__,__LINE__,v); return NULL; }
#define CHECK_NUMBER(v,type) if( !(val_is_int(v) || val_is_float(v)) ) { check_failed(__FUNCTION__,__FILE__,__LINE__,v); return NULL; }
#define CHECK_Int(v) CHECK_NUMBER(v,int)
#define CHECK_Float(v) CHECK_NUMBER(v,float)
#define CHECK_String(v) CHECK(v,string)
#define CHECK_Dynamic(v) check_failed(__FUNCTION__,__FILE__,__LINE__,v)


/* handle kinds */
#define CHECK_KIND(v,kind) if( !val_is_abstract(v) || !val_is_kind(v,kind) ) { \
                                    check_failed(__FUNCTION__,__FILE__,__LINE__,v); }
#define VAL_KIND(v,kind) val_data(v)
#define ALLOC_KIND(v,kind) (alloc_abstract(kind,(void*)v))

